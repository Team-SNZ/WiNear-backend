name: recsys-agent - build & push (multi-arch) + deploy

on:
  push:
    branches: [ "main" ]
    tags: [ "v*" ]

jobs:
  build-push:
    runs-on: ubuntu-latest
    env:
      IMAGE: ${{ vars.DOCKERHUB_USERNAME }}/winear-recsys-agent
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: QEMU 설치
        uses: docker/setup-qemu-action@v3

      - name: Buildx 설치
        uses: docker/setup-buildx-action@v3

      - name: Docker Hub 로그인
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Compute tags
        id: meta
        run: |
          SHA=${GITHUB_SHA::7}
          echo "sha=${SHA}" >> $GITHUB_OUTPUT
          if [[ "$GITHUB_REF" == refs/tags/v* ]]; then
            echo "is_tag=true"  >> $GITHUB_OUTPUT
            echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
          else
            echo "is_tag=false" >> $GITHUB_OUTPUT
          fi

      - name: Build & Push (edge + sha; multi-arch)
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          platforms: linux/amd64,linux/arm64
          tags: |
            ${{ env.IMAGE }}:${{ steps.meta.outputs.sha }}
            ${{ env.IMAGE }}:edge
          cache-from: type=registry,ref=${{ env.IMAGE }}:buildcache
          cache-to:   type=registry,ref=${{ env.IMAGE }}:buildcache,mode=max

      - name: Promote for release (version + latest)
        if: steps.meta.outputs.is_tag == 'true'
        run: |
          docker buildx imagetools create \
            -t ${{ env.IMAGE }}:${{ steps.meta.outputs.version }} \
            -t ${{ env.IMAGE }}:latest \
            ${{ env.IMAGE }}:${{ steps.meta.outputs.sha }}

  deploy:
    needs: build-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: SSH deploy (compose pull & up -d)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ vars.SSH_HOST }}
          username: ${{ vars.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -e
            cd /home/ubuntu/stack
            docker compose pull
            docker compose up -d
            docker image prune -f